version: '3.8'

services:
  postgresql:
    image: 'postgres:16-alpine'
    volumes:
      - 'postgresql-data:/var/lib/postgresql/data'
    environment:
      - POSTGRES_USER=$SERVICE_USER_POSTGRES
      - POSTGRES_PASSWORD=$SERVICE_PASSWORD_POSTGRES
      - 'POSTGRES_DB=${POSTGRES_DB:-mutumwa_ai}'
    healthcheck:
      test:
        - CMD-SHELL
        - 'pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}'
      interval: 5s
      timeout: 20s
      retries: 10

  redis:
    image: redis:7-alpine
    container_name: mutumwa-ai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  collector:
    build:
      context: ./collector
      dockerfile: Dockerfile
    container_name: mutumwa-ai-collector
    ports:
      - "8888:8888"
    environment:
      - NODE_ENV=production
      - SERVER_PORT=8888
      - STORAGE_DIR=/app/collector/storage
      - HOT_DIR=/app/collector/hotdir
      - COLLECTOR_DIR=/app/collector
    volumes:
      - ./collector/storage:/app/collector/storage
      - ./collector/hotdir:/app/collector/hotdir
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: mutumwa-ai-server
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DB_USER=$SERVICE_USER_POSTGRES
      - DB_PASSWORD=$SERVICE_PASSWORD_POSTGRES
      - 'DB_NAME=${POSTGRES_DB:-mutumwa_ai}'
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: mutumwa-ai-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://server:3001
    depends_on:
      - server
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data: