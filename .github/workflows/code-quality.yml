name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis

    - name: Use Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd collector && npm ci --legacy-peer-deps
        cd ../frontend && npm ci
        cd ../server && npm ci

    - name: Run ESLint
      run: |
        # Frontend linting
        cd frontend
        npm run lint -- --format=json --output-file=../eslint-frontend.json || true
        cd ..
        
        # Collector linting
        cd collector
        npm run lint || true
        cd ..

    - name: Run Prettier check
      run: |
        # Check if prettier is available and run it
        if command -v prettier &> /dev/null; then
          prettier --check "**/*.{js,jsx,ts,tsx,json,css,md}" || true
        fi

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  dockerfile-lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Lint Dockerfiles
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: "collector/Dockerfile"
        failure-threshold: warning

    - name: Lint Frontend Dockerfile
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: "frontend/Dockerfile"
        failure-threshold: warning

    - name: Lint Server Dockerfile
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: "server/Dockerfile"
        failure-threshold: warning

  docker-compose-validation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate docker-compose.yml
      run: |
        docker-compose config -q

    - name: Check for docker-compose best practices
      run: |
        # Check for version pinning
        if grep -q "latest" docker-compose.yml; then
          echo "Warning: Using 'latest' tag in docker-compose.yml"
        fi
        
        # Check for health checks
        if ! grep -q "healthcheck" docker-compose.yml; then
          echo "Warning: No health checks found in docker-compose.yml"
        fi
